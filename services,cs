using System;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;

namespace network
{
    class services
    {

        //var horaAtual = PegarDtHoraAtualizada("a.ntp.br");
        //SetTime(horaAtual.ToUniversalTime());

        //administrater trust
        [DllImport("kernel32.dll", EntryPoint = "SetSystemTime", SetLastError = true)]
        public extern static bool Win32SetSystemTime(ref SystemTime sysTime);

        [DllImport("kernel32.dll", EntryPoint = "GetSystemTime", SetLastError = true)]
        public extern static void Win32GetSystemTime(ref SystemTime sysTime);

        public struct SystemTime
        {
            public ushort Year;
            public ushort Month;
            public ushort DayOfWeek;
            public ushort Day;
            public ushort Hour;
            public ushort Minute;
            public ushort Second;
            public ushort Millisecond;
        }

        public static DateTime CatchDateTimeUpdated(string ntpServer)
        {
            var ntpData = new byte[48];
            ntpData[0] = 0x1B; //LeapIndicator = 0 (no warning), VersionNum = 3 (IPv4 only), Mode = 3 (Client Mode)

            //just IPV4
            var addresses = Dns.GetHostEntry(ntpServer).AddressList.First(a => a.AddressFamily == AddressFamily.InterNetwork);

            var ipEndPoint = new IPEndPoint(addresses, 123);
            var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

            socket.ReceiveTimeout = 5000; //5 seconds timeout
            socket.Connect(ipEndPoint);
            socket.Send(ntpData);
            socket.Receive(ntpData);
            socket.Close();

            ulong intPart = (ulong)ntpData[40] << 24 | (ulong)ntpData[41] << 16 | (ulong)ntpData[42] << 8 | ntpData[43];
            ulong fractPart = (ulong)ntpData[44] << 24 | (ulong)ntpData[45] << 16 | (ulong)ntpData[46] << 8 | ntpData[47];

            var milliseconds = (intPart * 1000) + ((fractPart * 1000) / 0x100000000L);
            var networkDateTime = (new DateTime(1900, 1, 1)).AddMilliseconds((long)milliseconds).ToLocalTime();

            //change to Brazil time
            //networkDateTime = DateTime.ParseExact(networkDateTime.ToString(), "dd/M/yyyy HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal);
            return networkDateTime;
        }

        private static void SetTime(DateTime dataHoraAtualizada)
        {
            // Prepare native method with the defined structure.
            var st = new SystemTime
            {
                Year = (ushort)(dataHoraAtualizada.Year),
                Month = (ushort)(dataHoraAtualizada.Month),
                Hour = (ushort)(dataHoraAtualizada.Hour),
                Day = (ushort)(dataHoraAtualizada.Day),
                Minute = (ushort)(dataHoraAtualizada.Minute),
                Second = (ushort)(dataHoraAtualizada.Second)
            };

            // Set the system date time.
            var resp = Win32SetSystemTime(ref st);
            Debug.Print(resp.ToString());
        }
    }
}
